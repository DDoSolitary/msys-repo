diff --git a/src/nvim/event/libuv_process.c b/src/nvim/event/libuv_process.c
index c02f73043..491a944ed 100644
--- a/src/nvim/event/libuv_process.c
+++ b/src/nvim/event/libuv_process.c
@@ -54,16 +54,37 @@ int libuv_process_spawn(LibuvProcess *uvproc)
     uvproc->uvopts.env = NULL;
   }
 
+  int fds[2];
+
   if (!proc->in.closed) {
+#ifdef __CYGWIN__
+    uvproc->uvstdio[0].flags = UV_INHERIT_FD | UV_READABLE_PIPE;
+    if (pipe2(fds, O_CLOEXEC)) {
+      ELOG("pipe2 failed: %s", strerror(errno));
+      return -errno;
+    }
+    uvproc->uvstdio[0].data.fd = fds[0];
+    uv_pipe_open(&proc->in.uv.pipe, fds[1]);
+#else
     uvproc->uvstdio[0].flags = UV_CREATE_PIPE | UV_READABLE_PIPE;
 #ifdef WIN32
     uvproc->uvstdio[0].flags |= proc->overlapped ? UV_OVERLAPPED_PIPE : 0;
 #endif
     uvproc->uvstdio[0].data.stream = STRUCT_CAST(uv_stream_t,
                                                  &proc->in.uv.pipe);
+#endif
   }
 
   if (!proc->out.closed) {
+#ifdef __CYGWIN__
+    uvproc->uvstdio[1].flags = UV_INHERIT_FD | UV_WRITABLE_PIPE;
+    if (pipe2(fds, O_CLOEXEC)) {
+      ELOG("pipe2 failed: %s", strerror(errno));
+      return -errno;
+    }
+    uvproc->uvstdio[1].data.fd = fds[1];
+    uv_pipe_open(&proc->out.uv.pipe, fds[0]);
+#else
     uvproc->uvstdio[1].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;
 #ifdef WIN32
     // pipe must be readable for IOCP to work on Windows.
@@ -72,12 +93,23 @@ int libuv_process_spawn(LibuvProcess *uvproc)
 #endif
     uvproc->uvstdio[1].data.stream = STRUCT_CAST(uv_stream_t,
                                                  &proc->out.uv.pipe);
+#endif
   }
 
   if (!proc->err.closed) {
+#ifdef __CYGWIN__
+    uvproc->uvstdio[2].flags = UV_INHERIT_FD | UV_WRITABLE_PIPE;
+    if (pipe2(fds, O_CLOEXEC)) {
+      ELOG("pipe2 failed: %s", strerror(errno));
+      return -errno;
+    }
+    uvproc->uvstdio[2].data.fd = fds[1];
+    uv_pipe_open(&proc->err.uv.pipe, fds[0]);
+#else
     uvproc->uvstdio[2].flags = UV_CREATE_PIPE | UV_WRITABLE_PIPE;
     uvproc->uvstdio[2].data.stream = STRUCT_CAST(uv_stream_t,
                                                  &proc->err.uv.pipe);
+#endif
   }
 
   int status;
